name: Versioning and Tagging

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  versioning:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install dependencies
        run: |
          poetry install --no-root
          source .venv/bin/activate

      - name: Read package version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(poetry run python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse refs/tags/v${{ env.VERSION }} >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} exists"
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag v${{ env.VERSION }} does not exist"
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Fail workflow if tag already exists
        if: env.EXISTS == 'true'
        run: |
          echo "Error: Tag v${{ env.VERSION }} already exists! Please update the package version in file pyproject.toml."
          exit 1

      - name: Create and push tag
        # Only create tag if workflow is triggered by push to master, not if it is triggered by
        # a pull request.
        if: github.event_name == 'push' && env.EXISTS == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ env.VERSION }} -m "Release v${{ env.VERSION }}"
          git push origin v${{ env.VERSION }}
