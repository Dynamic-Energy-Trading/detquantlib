# Python package publisher workflow. The workflow checks the validity of package version updates,
# creates version tags, and publishes package updates to PyPI.

name: Python Package Publisher

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  package_publisher:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install dependencies
        run: |
          poetry install --no-root
          source .venv/bin/activate

      - name: Read package version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(poetry run python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Validate version format (Semantic Versioning)
        run: |
          VERSION=${{ env.VERSION }}
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION. Expected format: MAJOR.MINOR.PATCH"
            exit 1
          else
            echo "✅ Version format is valid: $VERSION"
          fi

      - name: Check if tag already exists
        id: check_new_tag
        run: |
          if git rev-parse refs/tags/v${{ env.VERSION }} >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_ENV
            echo "Error: Tag v${{ env.VERSION }} already exists! Please update the package version in file pyproject.toml."
            exit 1
          else
            echo "EXISTS=false" >> $GITHUB_ENV
            echo "✅ Tag v${{ env.VERSION }} does not exist."
          fi

      - name: Get latest Git tag on master branch
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 | sed 's/^v//')
          if [ -z "$LATEST_TAG" ]; then
            echo "❌ No Git tags found on master branch!"
            exit 1
          fi
          echo "Latest Git tag on master branch: v$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Validate version increment
        id: check_version_increment
        run: |
          NEW_VERSION=${{ env.VERSION }}
          OLD_VERSION=${{ env.LATEST_TAG }}

          IFS='.' read -r OLD_MAJOR OLD_MINOR OLD_PATCH <<< "$OLD_VERSION"
          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "$NEW_VERSION"

          if [ "$NEW_MAJOR" -eq $((OLD_MAJOR + 1)) ] && [ "$NEW_MINOR" -eq 0 ] && [ "$NEW_PATCH" -eq 0 ]; then
            echo "✅ Valid major version increment (v$OLD_VERSION -> v$NEW_VERSION)."
          elif [ "$NEW_MAJOR" -eq "$OLD_MAJOR" ] && [ "$NEW_MINOR" -eq $((OLD_MINOR + 1)) ] && [ "$NEW_PATCH" -eq 0 ]; then
            echo "✅ Valid minor version increment (v$OLD_VERSION -> v$NEW_VERSION)."
          elif [ "$NEW_MAJOR" -eq "$OLD_MAJOR" ] && [ "$NEW_MINOR" -eq "$OLD_MINOR" ] && [ "$NEW_PATCH" -eq $((OLD_PATCH + 1)) ]; then
            echo "✅ Valid patch version increment (v$OLD_VERSION -> v$NEW_VERSION)."
          else
            echo "❌ Invalid version increment! New version ($NEW_VERSION) must be one step ahead of old version ($OLD_VERSION)."
            exit 1
          fi

      # -------------------------------------------------------------------------------------------
      # The next steps are only triggered by push to master, not by pull requests
      # -------------------------------------------------------------------------------------------

      - name: Create and push tag
        if: github.event_name == 'push' && env.EXISTS == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ env.VERSION }} -m "Release v${{ env.VERSION }}"
          git push origin v${{ env.VERSION }}

      - name: Build package
        if: github.event_name == 'push' && env.EXISTS == 'false'
        run: poetry build

      - name: Publish to PyPI
        if: github.event_name == 'push' && env.EXISTS == 'false'
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --skip-existing --no-interaction
